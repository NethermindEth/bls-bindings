// SPDX-FileCopyrightText: 2024 Demerzel Solutions Limited
// SPDX-License-Identifier: MIT

using System;
using FluentAssertions;
using NUnit.Framework;

namespace Nethermind.Crypto.Test;

using G1 = Bls.P1;
using G2 = Bls.P2;
using GT = Bls.PT;

[TestFixture]
public class BlsTests
{
    [Test]
    public void PairingTest1()
    {
        // e((12+34)*56*g1, 78*g2) == e(78*g1, 12*56*g2) * e(78*g1, 34*56*g2)
        GT q1 = new(G1.generator().mult((12 + 34) * 56), G2.generator().mult(78));
        GT q2 = new(G1.generator().mult(78), G2.generator().mult(12 * 56));
        GT q3 = new(G1.generator().mult(78), G2.generator().mult(34 * 56));
        q2.mul(q3);
        Assert.That(GT.finalverify(q1, q2));
    }

    [Test]
    public void PairingTest2()
    {
        GT q1 = new(G1.generator().mult(2), G2.generator());
        GT q2 = new(G1.generator(), G2.generator().mult(2));
        Assert.That(GT.finalverify(q1, q2));
    }


    [Test]
    public void MapToG2Test()
    {
        byte[] c0 = [0x14,0x40,0x6e,0x5b,0xfb,0x92,0x09,0x25,0x6a,0x38,0x20,0x87,0x9a,0x29,0xac,0x2f,0x62,0xd6,0xac,0xa8,0x23,0x24,0xbf,0x3a,0xe2,0xaa,0x7d,0x3c,0x54,0x79,0x20,0x43,0xbd,0x8c,0x79,0x1f,0xcc,0xdb,0x08,0x0c,0x1a,0x52,0xdc,0x68,0xb8,0xb6,0x93,0x50];
        byte[] c1 = [0x0e,0x88,0x5b,0xb3,0x39,0x96,0xe1,0x2f,0x07,0xda,0x69,0x07,0x3e,0x2c,0x0c,0xc8,0x80,0xbc,0x8e,0xff,0x26,0xd2,0xa7,0x24,0x29,0x9e,0xb1,0x2d,0x54,0xf4,0xbc,0xf2,0x6f,0x47,0x48,0xbb,0x02,0x0e,0x80,0xa7,0xe3,0x79,0x4a,0x7b,0x0e,0x47,0xa6,0x41];
        byte[] expected = [0x0d,0x02,0x93,0x93,0xd3,0xa1,0x3f,0xf5,0xb2,0x6f,0xe5,0x2b,0xd8,0x95,0x37,0x68,0x94,0x6c,0x55,0x10,0xf9,0x44,0x1f,0x11,0x36,0xf1,0xe9,0x38,0x95,0x78,0x82,0xdb,0x6a,0xdb,0xd7,0x50,0x41,0x77,0xee,0x49,0x28,0x1e,0xcc,0xcb,0xa5,0x96,0xf2,0xbf,0x19,0x93,0xf6,0x68,0xfb,0x1a,0xe6,0x03,0xae,0xfb,0xb1,0x32,0x30,0x00,0x03,0x3f,0xcb,0x3b,0x65,0xd8,0xed,0x3b,0xf0,0x9c,0x84,0xc6,0x1e,0x27,0x70,0x4b,0x74,0x5f,0x54,0x02,0x99,0xa1,0x87,0x2c,0xd6,0x97,0xae,0x45,0xa5,0xaf,0xd7,0x80,0xf1,0xd6,0x07,0x9c,0xb4,0x10,0x60,0xef,0x7a,0x12,0x8d,0x28,0x6c,0x9e,0xf8,0x63,0x86,0x89,0xa4,0x9c,0xa1,0x9d,0xa8,0x67,0x2e,0xa5,0xc4,0x7b,0x6b,0xa6,0xdb,0xde,0x19,0x3e,0xe8,0x35,0xd3,0xb8,0x7a,0x76,0xa6,0x89,0x96,0x60,0x37,0xc0,0x71,0x59,0xc1,0x0d,0x17,0xc6,0x88,0xae,0x9a,0x8b,0x59,0xa7,0x06,0x9c,0x27,0xf2,0xd5,0x8d,0xd2,0x19,0x6c,0xb4,0x14,0xf4,0xfb,0x89,0xda,0x85,0x10,0x51,0x8a,0x11,0x42,0xab,0x19,0xd1,0x58,0xba,0xdd,0x1c,0x3b,0xad,0x03,0x40,0x8f,0xaf,0xb1,0x66,0x99,0x03,0xcd,0x6c];

        G2 p = G2.generator();
        p.map_to(c0, c1);

        Console.WriteLine(BitConverter.ToString(p.serialize()));
        Console.WriteLine(BitConverter.ToString(expected));

        Assert.That(p.serialize(), Is.EqualTo(expected));
    }
}